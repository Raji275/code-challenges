service: serverless-crud-api

frameworkVersion: '>=3.0.0 <4.0.0'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    TASKS_TABLE: ${self:service}-tasks-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TASKS_TABLE}/index/*

functions:
  create:
    handler: src/handlers/create.handler
    events:
      - http:
          path: tasks
          method: post
          cors: true

  getAll:
    handler: src/handlers/getAll.handler
    events:
      - http:
          path: tasks
          method: get
          cors: true

  getOne:
    handler: src/handlers/getOne.handler
    events:
      - http:
          path: tasks/{id}
          method: get
          cors: true

  update:
    handler: src/handlers/update.handler
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true

  delete:
    handler: src/handlers/delete.handler
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-tasks-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    noPrependStageInUrl: true
    lambdaPort: 3002
    useChildProcesses: true
