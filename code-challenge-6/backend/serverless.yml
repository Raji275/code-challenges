service: my-serverless-app

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    DYNAMODB_TABLE: ${self:service}-items-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

functions:
  createItem:
    handler: src/handlers/create.handler
    events:
      - http:
          path: items
          method: post
          cors: true

  getItem:
    handler: src/handlers/get.handler
    events:
      - http:
          path: items/{id}
          method: get
          cors: true

  listItems:
    handler: src/handlers/list.handler
    events:
      - http:
          path: items
          method: get
          cors: true

  updateItem:
    handler: src/handlers/update.handler
    events:
      - http:
          path: items/{id}
          method: put
          cors: true

  deleteItem:
    handler: src/handlers/delete.handler
    events:
      - http:
          path: items/{id}
          method: delete
          cors: true

resources:
  Resources:
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
